events {
    worker_connections 1000;
}

http {
    log_format custom_json escape=json '{'
        '"remote_addr": "$remote_addr", '
        '"remote_user": "$remote_user", '
        '"time_local": "$time_local", '
        '"request": "$request", '
        '"status": "$status", '
        '"body_bytes_sent": "$body_bytes_sent", '
        '"http_referer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"http_x_forwarded_for": "$http_x_forwarded_for", '
        '"uri": "$uri", '
        '"args": "$args", '
        '"request_method": "$request_method", '
        '"request_time": "$request_time", '
        '"upstream_response_time": "$upstream_response_time", '
        '"upstream_addr": "$upstream_addr", '
        '"upstream_status": "$upstream_status", '
        '"ssl_protocol": "$ssl_protocol", '
        '"ssl_cipher": "$ssl_cipher", '
        '"connection": "$connection", '
        '"connection_requests": "$connection_requests", '
        '"query_params": "$query_params", '
        '"request_body_content": "$request_body_content", '
        '"response_body": "$response_body"'
    '}';

    lua_need_request_body on;

    access_log /var/log/nginx/access.log custom_json;
    error_log /var/log/nginx/error.log;

    server {
        listen 3000;

        location / {
            default_type application/json;
            proxy_pass http://api:80;
        
            # Define a variável $query_params usando Lua
            set_by_lua_block $query_params {
                return ngx.var.args or ""
            }
            # Define a variável $request_body_content
            set_by_lua_block $request_body_content {
                return ""
            }
            # Define a variável $response_body
            set_by_lua_block $response_body {
                return ""
            }

            # Lê o corpo da requisição e armazena na variável $request_body_content
            access_by_lua_block {
                ngx.req.read_body()
                ngx.var.request_body_content = ngx.req.get_body_data()
            }
            
            # Função Lua para capturar o corpo da resposta
            body_filter_by_lua_block {
                local cjson = require "cjson"

                if ngx.status == 200 then
                    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. ngx.arg[1]
                    if ngx.arg[2] then
                        ngx.var.response_body = ngx.ctx.buffered
                    end
                end
            }
            
        }
    }
}